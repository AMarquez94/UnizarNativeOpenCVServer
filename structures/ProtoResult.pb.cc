// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoResult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "headers/ProtoResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoResult_2eproto() {
  protobuf_AddDesc_ProtoResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoResult.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoResult_descriptor_ = file->message_type(0);
  static const int ProtoResult_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, objectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, viewname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, npoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, nmatches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, x3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, y3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, x4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, y4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, allergens_),
  };
  ProtoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoResult_descriptor_,
      ProtoResult::default_instance_,
      ProtoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoResult_descriptor_, &ProtoResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoResult_2eproto() {
  delete ProtoResult::default_instance_;
  delete ProtoResult_reflection_;
}

void protobuf_AddDesc_ProtoResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoResult.proto\"\311\001\n\013ProtoResult\022\022\n\no"
    "bjectName\030\001 \002(\t\022\020\n\010viewName\030\002 \002(\t\022\017\n\007nPo"
    "ints\030\003 \002(\005\022\020\n\010nMatches\030\004 \002(\005\022\n\n\002x1\030\005 \001(\002"
    "\022\n\n\002y1\030\006 \001(\002\022\n\n\002x2\030\007 \001(\002\022\n\n\002y2\030\010 \001(\002\022\n\n\002"
    "x3\030\t \001(\002\022\n\n\002y3\030\n \001(\002\022\n\n\002x4\030\013 \001(\002\022\n\n\002y4\030\014"
    " \001(\002\022\021\n\tallergens\030\r \003(\t", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoResult.proto", &protobuf_RegisterTypes);
  ProtoResult::default_instance_ = new ProtoResult();
  ProtoResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoResult_2eproto {
  StaticDescriptorInitializer_ProtoResult_2eproto() {
    protobuf_AddDesc_ProtoResult_2eproto();
  }
} static_descriptor_initializer_ProtoResult_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoResult::kObjectNameFieldNumber;
const int ProtoResult::kViewNameFieldNumber;
const int ProtoResult::kNPointsFieldNumber;
const int ProtoResult::kNMatchesFieldNumber;
const int ProtoResult::kX1FieldNumber;
const int ProtoResult::kY1FieldNumber;
const int ProtoResult::kX2FieldNumber;
const int ProtoResult::kY2FieldNumber;
const int ProtoResult::kX3FieldNumber;
const int ProtoResult::kY3FieldNumber;
const int ProtoResult::kX4FieldNumber;
const int ProtoResult::kY4FieldNumber;
const int ProtoResult::kAllergensFieldNumber;
#endif  // !_MSC_VER

ProtoResult::ProtoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoResult)
}

void ProtoResult::InitAsDefaultInstance() {
}

ProtoResult::ProtoResult(const ProtoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoResult)
}

void ProtoResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npoints_ = 0;
  nmatches_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  x3_ = 0;
  y3_ = 0;
  x4_ = 0;
  y4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoResult::~ProtoResult() {
  // @@protoc_insertion_point(destructor:ProtoResult)
  SharedDtor();
}

void ProtoResult::SharedDtor() {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objectname_;
  }
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewname_;
  }
  if (this != default_instance_) {
  }
}

void ProtoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoResult_descriptor_;
}

const ProtoResult& ProtoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoResult_2eproto();
  return *default_instance_;
}

ProtoResult* ProtoResult::default_instance_ = NULL;

ProtoResult* ProtoResult::New() const {
  return new ProtoResult;
}

void ProtoResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtoResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(npoints_, y2_);
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objectname_->clear();
      }
    }
    if (has_viewname()) {
      if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viewname_->clear();
      }
    }
  }
  ZR_(x3_, y4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  allergens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string objectName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_viewName;
        break;
      }

      // required string viewName = 2;
      case 2: {
        if (tag == 18) {
         parse_viewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->viewname().data(), this->viewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "viewname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nPoints;
        break;
      }

      // required int32 nPoints = 3;
      case 3: {
        if (tag == 24) {
         parse_nPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npoints_)));
          set_has_npoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nMatches;
        break;
      }

      // required int32 nMatches = 4;
      case 4: {
        if (tag == 32) {
         parse_nMatches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmatches_)));
          set_has_nmatches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_x1;
        break;
      }

      // optional float x1 = 5;
      case 5: {
        if (tag == 45) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_y1;
        break;
      }

      // optional float y1 = 6;
      case 6: {
        if (tag == 53) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_x2;
        break;
      }

      // optional float x2 = 7;
      case 7: {
        if (tag == 61) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_y2;
        break;
      }

      // optional float y2 = 8;
      case 8: {
        if (tag == 69) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_x3;
        break;
      }

      // optional float x3 = 9;
      case 9: {
        if (tag == 77) {
         parse_x3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x3_)));
          set_has_x3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_y3;
        break;
      }

      // optional float y3 = 10;
      case 10: {
        if (tag == 85) {
         parse_y3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y3_)));
          set_has_y3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_x4;
        break;
      }

      // optional float x4 = 11;
      case 11: {
        if (tag == 93) {
         parse_x4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x4_)));
          set_has_x4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_y4;
        break;
      }

      // optional float y4 = 12;
      case 12: {
        if (tag == 101) {
         parse_y4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y4_)));
          set_has_y4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_allergens;
        break;
      }

      // repeated string allergens = 13;
      case 13: {
        if (tag == 106) {
         parse_allergens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allergens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allergens(this->allergens_size() - 1).data(),
            this->allergens(this->allergens_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "allergens");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_allergens;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoResult)
  return false;
#undef DO_
}

void ProtoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoResult)
  // required string objectName = 1;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->objectname(), output);
  }

  // required string viewName = 2;
  if (has_viewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewname().data(), this->viewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->viewname(), output);
  }

  // required int32 nPoints = 3;
  if (has_npoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npoints(), output);
  }

  // required int32 nMatches = 4;
  if (has_nmatches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nmatches(), output);
  }

  // optional float x1 = 5;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x1(), output);
  }

  // optional float y1 = 6;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y1(), output);
  }

  // optional float x2 = 7;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x2(), output);
  }

  // optional float y2 = 8;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y2(), output);
  }

  // optional float x3 = 9;
  if (has_x3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x3(), output);
  }

  // optional float y3 = 10;
  if (has_y3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->y3(), output);
  }

  // optional float x4 = 11;
  if (has_x4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x4(), output);
  }

  // optional float y4 = 12;
  if (has_y4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->y4(), output);
  }

  // repeated string allergens = 13;
  for (int i = 0; i < this->allergens_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->allergens(i).data(), this->allergens(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "allergens");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->allergens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoResult)
}

::google::protobuf::uint8* ProtoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoResult)
  // required string objectName = 1;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objectname(), target);
  }

  // required string viewName = 2;
  if (has_viewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewname().data(), this->viewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->viewname(), target);
  }

  // required int32 nPoints = 3;
  if (has_npoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npoints(), target);
  }

  // required int32 nMatches = 4;
  if (has_nmatches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nmatches(), target);
  }

  // optional float x1 = 5;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->x1(), target);
  }

  // optional float y1 = 6;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->y1(), target);
  }

  // optional float x2 = 7;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x2(), target);
  }

  // optional float y2 = 8;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y2(), target);
  }

  // optional float x3 = 9;
  if (has_x3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->x3(), target);
  }

  // optional float y3 = 10;
  if (has_y3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->y3(), target);
  }

  // optional float x4 = 11;
  if (has_x4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->x4(), target);
  }

  // optional float y4 = 12;
  if (has_y4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->y4(), target);
  }

  // repeated string allergens = 13;
  for (int i = 0; i < this->allergens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allergens(i).data(), this->allergens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "allergens");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->allergens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoResult)
  return target;
}

int ProtoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string objectName = 1;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

    // required string viewName = 2;
    if (has_viewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewname());
    }

    // required int32 nPoints = 3;
    if (has_npoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npoints());
    }

    // required int32 nMatches = 4;
    if (has_nmatches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmatches());
    }

    // optional float x1 = 5;
    if (has_x1()) {
      total_size += 1 + 4;
    }

    // optional float y1 = 6;
    if (has_y1()) {
      total_size += 1 + 4;
    }

    // optional float x2 = 7;
    if (has_x2()) {
      total_size += 1 + 4;
    }

    // optional float y2 = 8;
    if (has_y2()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float x3 = 9;
    if (has_x3()) {
      total_size += 1 + 4;
    }

    // optional float y3 = 10;
    if (has_y3()) {
      total_size += 1 + 4;
    }

    // optional float x4 = 11;
    if (has_x4()) {
      total_size += 1 + 4;
    }

    // optional float y4 = 12;
    if (has_y4()) {
      total_size += 1 + 4;
    }

  }
  // repeated string allergens = 13;
  total_size += 1 * this->allergens_size();
  for (int i = 0; i < this->allergens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allergens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoResult::MergeFrom(const ProtoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  allergens_.MergeFrom(from.allergens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
    if (from.has_viewname()) {
      set_viewname(from.viewname());
    }
    if (from.has_npoints()) {
      set_npoints(from.npoints());
    }
    if (from.has_nmatches()) {
      set_nmatches(from.nmatches());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x3()) {
      set_x3(from.x3());
    }
    if (from.has_y3()) {
      set_y3(from.y3());
    }
    if (from.has_x4()) {
      set_x4(from.x4());
    }
    if (from.has_y4()) {
      set_y4(from.y4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoResult::CopyFrom(const ProtoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ProtoResult::Swap(ProtoResult* other) {
  if (other != this) {
    std::swap(objectname_, other->objectname_);
    std::swap(viewname_, other->viewname_);
    std::swap(npoints_, other->npoints_);
    std::swap(nmatches_, other->nmatches_);
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(x3_, other->x3_);
    std::swap(y3_, other->y3_);
    std::swap(x4_, other->x4_);
    std::swap(y4_, other->y4_);
    allergens_.Swap(&other->allergens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoResult_descriptor_;
  metadata.reflection = ProtoResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
