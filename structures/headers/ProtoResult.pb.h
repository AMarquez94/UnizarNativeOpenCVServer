// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoResult.proto

#ifndef PROTOBUF_ProtoResult_2eproto__INCLUDED
#define PROTOBUF_ProtoResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoResult_2eproto();
void protobuf_AssignDesc_ProtoResult_2eproto();
void protobuf_ShutdownFile_ProtoResult_2eproto();

class ProtoResult;

// ===================================================================

class ProtoResult : public ::google::protobuf::Message {
 public:
  ProtoResult();
  virtual ~ProtoResult();

  ProtoResult(const ProtoResult& from);

  inline ProtoResult& operator=(const ProtoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoResult& default_instance();

  void Swap(ProtoResult* other);

  // implements Message ----------------------------------------------

  ProtoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoResult& from);
  void MergeFrom(const ProtoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string objectName = 1;
  inline bool has_objectname() const;
  inline void clear_objectname();
  static const int kObjectNameFieldNumber = 1;
  inline const ::std::string& objectname() const;
  inline void set_objectname(const ::std::string& value);
  inline void set_objectname(const char* value);
  inline void set_objectname(const char* value, size_t size);
  inline ::std::string* mutable_objectname();
  inline ::std::string* release_objectname();
  inline void set_allocated_objectname(::std::string* objectname);

  // required string viewName = 2;
  inline bool has_viewname() const;
  inline void clear_viewname();
  static const int kViewNameFieldNumber = 2;
  inline const ::std::string& viewname() const;
  inline void set_viewname(const ::std::string& value);
  inline void set_viewname(const char* value);
  inline void set_viewname(const char* value, size_t size);
  inline ::std::string* mutable_viewname();
  inline ::std::string* release_viewname();
  inline void set_allocated_viewname(::std::string* viewname);

  // required int32 nPoints = 3;
  inline bool has_npoints() const;
  inline void clear_npoints();
  static const int kNPointsFieldNumber = 3;
  inline ::google::protobuf::int32 npoints() const;
  inline void set_npoints(::google::protobuf::int32 value);

  // required int32 nMatches = 4;
  inline bool has_nmatches() const;
  inline void clear_nmatches();
  static const int kNMatchesFieldNumber = 4;
  inline ::google::protobuf::int32 nmatches() const;
  inline void set_nmatches(::google::protobuf::int32 value);

  // optional float x1 = 5;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 5;
  inline float x1() const;
  inline void set_x1(float value);

  // optional float y1 = 6;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 6;
  inline float y1() const;
  inline void set_y1(float value);

  // optional float x2 = 7;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 7;
  inline float x2() const;
  inline void set_x2(float value);

  // optional float y2 = 8;
  inline bool has_y2() const;
  inline void clear_y2();
  static const int kY2FieldNumber = 8;
  inline float y2() const;
  inline void set_y2(float value);

  // optional float x3 = 9;
  inline bool has_x3() const;
  inline void clear_x3();
  static const int kX3FieldNumber = 9;
  inline float x3() const;
  inline void set_x3(float value);

  // optional float y3 = 10;
  inline bool has_y3() const;
  inline void clear_y3();
  static const int kY3FieldNumber = 10;
  inline float y3() const;
  inline void set_y3(float value);

  // optional float x4 = 11;
  inline bool has_x4() const;
  inline void clear_x4();
  static const int kX4FieldNumber = 11;
  inline float x4() const;
  inline void set_x4(float value);

  // optional float y4 = 12;
  inline bool has_y4() const;
  inline void clear_y4();
  static const int kY4FieldNumber = 12;
  inline float y4() const;
  inline void set_y4(float value);

  // repeated string allergens = 13;
  inline int allergens_size() const;
  inline void clear_allergens();
  static const int kAllergensFieldNumber = 13;
  inline const ::std::string& allergens(int index) const;
  inline ::std::string* mutable_allergens(int index);
  inline void set_allergens(int index, const ::std::string& value);
  inline void set_allergens(int index, const char* value);
  inline void set_allergens(int index, const char* value, size_t size);
  inline ::std::string* add_allergens();
  inline void add_allergens(const ::std::string& value);
  inline void add_allergens(const char* value);
  inline void add_allergens(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& allergens() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allergens();

  // @@protoc_insertion_point(class_scope:ProtoResult)
 private:
  inline void set_has_objectname();
  inline void clear_has_objectname();
  inline void set_has_viewname();
  inline void clear_has_viewname();
  inline void set_has_npoints();
  inline void clear_has_npoints();
  inline void set_has_nmatches();
  inline void clear_has_nmatches();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_y2();
  inline void clear_has_y2();
  inline void set_has_x3();
  inline void clear_has_x3();
  inline void set_has_y3();
  inline void clear_has_y3();
  inline void set_has_x4();
  inline void clear_has_x4();
  inline void set_has_y4();
  inline void clear_has_y4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* objectname_;
  ::std::string* viewname_;
  ::google::protobuf::int32 npoints_;
  ::google::protobuf::int32 nmatches_;
  float x1_;
  float y1_;
  float x2_;
  float y2_;
  float x3_;
  float y3_;
  float x4_;
  float y4_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allergens_;
  friend void  protobuf_AddDesc_ProtoResult_2eproto();
  friend void protobuf_AssignDesc_ProtoResult_2eproto();
  friend void protobuf_ShutdownFile_ProtoResult_2eproto();

  void InitAsDefaultInstance();
  static ProtoResult* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoResult

// required string objectName = 1;
inline bool ProtoResult::has_objectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoResult::set_has_objectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoResult::clear_has_objectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoResult::clear_objectname() {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_->clear();
  }
  clear_has_objectname();
}
inline const ::std::string& ProtoResult::objectname() const {
  // @@protoc_insertion_point(field_get:ProtoResult.objectName)
  return *objectname_;
}
inline void ProtoResult::set_objectname(const ::std::string& value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoResult.objectName)
}
inline void ProtoResult::set_objectname(const char* value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoResult.objectName)
}
inline void ProtoResult::set_objectname(const char* value, size_t size) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoResult.objectName)
}
inline ::std::string* ProtoResult::mutable_objectname() {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoResult.objectName)
  return objectname_;
}
inline ::std::string* ProtoResult::release_objectname() {
  clear_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = objectname_;
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoResult::set_allocated_objectname(::std::string* objectname) {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objectname_;
  }
  if (objectname) {
    set_has_objectname();
    objectname_ = objectname;
  } else {
    clear_has_objectname();
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoResult.objectName)
}

// required string viewName = 2;
inline bool ProtoResult::has_viewname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoResult::set_has_viewname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoResult::clear_has_viewname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoResult::clear_viewname() {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_->clear();
  }
  clear_has_viewname();
}
inline const ::std::string& ProtoResult::viewname() const {
  // @@protoc_insertion_point(field_get:ProtoResult.viewName)
  return *viewname_;
}
inline void ProtoResult::set_viewname(const ::std::string& value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoResult.viewName)
}
inline void ProtoResult::set_viewname(const char* value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoResult.viewName)
}
inline void ProtoResult::set_viewname(const char* value, size_t size) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoResult.viewName)
}
inline ::std::string* ProtoResult::mutable_viewname() {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoResult.viewName)
  return viewname_;
}
inline ::std::string* ProtoResult::release_viewname() {
  clear_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viewname_;
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtoResult::set_allocated_viewname(::std::string* viewname) {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewname_;
  }
  if (viewname) {
    set_has_viewname();
    viewname_ = viewname;
  } else {
    clear_has_viewname();
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoResult.viewName)
}

// required int32 nPoints = 3;
inline bool ProtoResult::has_npoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoResult::set_has_npoints() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoResult::clear_has_npoints() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoResult::clear_npoints() {
  npoints_ = 0;
  clear_has_npoints();
}
inline ::google::protobuf::int32 ProtoResult::npoints() const {
  // @@protoc_insertion_point(field_get:ProtoResult.nPoints)
  return npoints_;
}
inline void ProtoResult::set_npoints(::google::protobuf::int32 value) {
  set_has_npoints();
  npoints_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.nPoints)
}

// required int32 nMatches = 4;
inline bool ProtoResult::has_nmatches() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoResult::set_has_nmatches() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoResult::clear_has_nmatches() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoResult::clear_nmatches() {
  nmatches_ = 0;
  clear_has_nmatches();
}
inline ::google::protobuf::int32 ProtoResult::nmatches() const {
  // @@protoc_insertion_point(field_get:ProtoResult.nMatches)
  return nmatches_;
}
inline void ProtoResult::set_nmatches(::google::protobuf::int32 value) {
  set_has_nmatches();
  nmatches_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.nMatches)
}

// optional float x1 = 5;
inline bool ProtoResult::has_x1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoResult::set_has_x1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoResult::clear_has_x1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoResult::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline float ProtoResult::x1() const {
  // @@protoc_insertion_point(field_get:ProtoResult.x1)
  return x1_;
}
inline void ProtoResult::set_x1(float value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.x1)
}

// optional float y1 = 6;
inline bool ProtoResult::has_y1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoResult::set_has_y1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoResult::clear_has_y1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoResult::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline float ProtoResult::y1() const {
  // @@protoc_insertion_point(field_get:ProtoResult.y1)
  return y1_;
}
inline void ProtoResult::set_y1(float value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.y1)
}

// optional float x2 = 7;
inline bool ProtoResult::has_x2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoResult::set_has_x2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoResult::clear_has_x2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoResult::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline float ProtoResult::x2() const {
  // @@protoc_insertion_point(field_get:ProtoResult.x2)
  return x2_;
}
inline void ProtoResult::set_x2(float value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.x2)
}

// optional float y2 = 8;
inline bool ProtoResult::has_y2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoResult::set_has_y2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoResult::clear_has_y2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoResult::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
inline float ProtoResult::y2() const {
  // @@protoc_insertion_point(field_get:ProtoResult.y2)
  return y2_;
}
inline void ProtoResult::set_y2(float value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.y2)
}

// optional float x3 = 9;
inline bool ProtoResult::has_x3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoResult::set_has_x3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoResult::clear_has_x3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoResult::clear_x3() {
  x3_ = 0;
  clear_has_x3();
}
inline float ProtoResult::x3() const {
  // @@protoc_insertion_point(field_get:ProtoResult.x3)
  return x3_;
}
inline void ProtoResult::set_x3(float value) {
  set_has_x3();
  x3_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.x3)
}

// optional float y3 = 10;
inline bool ProtoResult::has_y3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoResult::set_has_y3() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoResult::clear_has_y3() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoResult::clear_y3() {
  y3_ = 0;
  clear_has_y3();
}
inline float ProtoResult::y3() const {
  // @@protoc_insertion_point(field_get:ProtoResult.y3)
  return y3_;
}
inline void ProtoResult::set_y3(float value) {
  set_has_y3();
  y3_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.y3)
}

// optional float x4 = 11;
inline bool ProtoResult::has_x4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoResult::set_has_x4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoResult::clear_has_x4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoResult::clear_x4() {
  x4_ = 0;
  clear_has_x4();
}
inline float ProtoResult::x4() const {
  // @@protoc_insertion_point(field_get:ProtoResult.x4)
  return x4_;
}
inline void ProtoResult::set_x4(float value) {
  set_has_x4();
  x4_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.x4)
}

// optional float y4 = 12;
inline bool ProtoResult::has_y4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoResult::set_has_y4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoResult::clear_has_y4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoResult::clear_y4() {
  y4_ = 0;
  clear_has_y4();
}
inline float ProtoResult::y4() const {
  // @@protoc_insertion_point(field_get:ProtoResult.y4)
  return y4_;
}
inline void ProtoResult::set_y4(float value) {
  set_has_y4();
  y4_ = value;
  // @@protoc_insertion_point(field_set:ProtoResult.y4)
}

// repeated string allergens = 13;
inline int ProtoResult::allergens_size() const {
  return allergens_.size();
}
inline void ProtoResult::clear_allergens() {
  allergens_.Clear();
}
inline const ::std::string& ProtoResult::allergens(int index) const {
  // @@protoc_insertion_point(field_get:ProtoResult.allergens)
  return allergens_.Get(index);
}
inline ::std::string* ProtoResult::mutable_allergens(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoResult.allergens)
  return allergens_.Mutable(index);
}
inline void ProtoResult::set_allergens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoResult.allergens)
  allergens_.Mutable(index)->assign(value);
}
inline void ProtoResult::set_allergens(int index, const char* value) {
  allergens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoResult.allergens)
}
inline void ProtoResult::set_allergens(int index, const char* value, size_t size) {
  allergens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoResult.allergens)
}
inline ::std::string* ProtoResult::add_allergens() {
  return allergens_.Add();
}
inline void ProtoResult::add_allergens(const ::std::string& value) {
  allergens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoResult.allergens)
}
inline void ProtoResult::add_allergens(const char* value) {
  allergens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoResult.allergens)
}
inline void ProtoResult::add_allergens(const char* value, size_t size) {
  allergens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoResult.allergens)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtoResult::allergens() const {
  // @@protoc_insertion_point(field_list:ProtoResult.allergens)
  return allergens_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtoResult::mutable_allergens() {
  // @@protoc_insertion_point(field_mutable_list:ProtoResult.allergens)
  return &allergens_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoResult_2eproto__INCLUDED
